{"version":3,"file":"static/js/3492.4d1d0235.chunk.js","mappings":"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","sources":["../node_modules/@mui/material/CssBaseline/CssBaseline.js","../node_modules/@mui/material/ScopedCssBaseline/scopedCssBaselineClasses.js","../node_modules/@mui/material/ScopedCssBaseline/ScopedCssBaseline.js","../node_modules/@mui/system/esm/GlobalStyles/GlobalStyles.js","../node_modules/@mui/material/GlobalStyles/GlobalStyles.js","../node_modules/@mui/material/zero-styled/index.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { globalCss } from \"../zero-styled/index.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\n\n// to determine if the global styles are static or dynamic\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst isDynamicSupport = typeof globalCss({}) === 'function';\nexport const html = (theme, enableColorScheme) => ({\n  WebkitFontSmoothing: 'antialiased',\n  // Antialiasing.\n  MozOsxFontSmoothing: 'grayscale',\n  // Antialiasing.\n  // Change from `box-sizing: content-box` so that `width`\n  // is not affected by `padding` or `border`.\n  boxSizing: 'border-box',\n  // Fix font resize problem in iOS\n  WebkitTextSizeAdjust: '100%',\n  // When used under CssVarsProvider, colorScheme should not be applied dynamically because it will generate the stylesheet twice for server-rendered applications.\n  ...(enableColorScheme && !theme.vars && {\n    colorScheme: theme.palette.mode\n  })\n});\nexport const body = theme => ({\n  color: (theme.vars || theme).palette.text.primary,\n  ...theme.typography.body1,\n  backgroundColor: (theme.vars || theme).palette.background.default,\n  '@media print': {\n    // Save printer ink.\n    backgroundColor: (theme.vars || theme).palette.common.white\n  }\n});\nexport const styles = (theme, enableColorScheme = false) => {\n  const colorSchemeStyles = {};\n  if (enableColorScheme && theme.colorSchemes && typeof theme.getColorSchemeSelector === 'function') {\n    Object.entries(theme.colorSchemes).forEach(([key, scheme]) => {\n      const selector = theme.getColorSchemeSelector(key);\n      if (selector.startsWith('@')) {\n        // for @media (prefers-color-scheme), we need to target :root\n        colorSchemeStyles[selector] = {\n          ':root': {\n            colorScheme: scheme.palette?.mode\n          }\n        };\n      } else {\n        // else, it's likely that the selector already target an element with a class or data attribute\n        colorSchemeStyles[selector.replace(/\\s*&/, '')] = {\n          colorScheme: scheme.palette?.mode\n        };\n      }\n    });\n  }\n  let defaultStyles = {\n    html: html(theme, enableColorScheme),\n    '*, *::before, *::after': {\n      boxSizing: 'inherit'\n    },\n    'strong, b': {\n      fontWeight: theme.typography.fontWeightBold\n    },\n    body: {\n      margin: 0,\n      // Remove the margin in all browsers.\n      ...body(theme),\n      // Add support for document.body.requestFullScreen().\n      // Other elements, if background transparent, are not supported.\n      '&::backdrop': {\n        backgroundColor: (theme.vars || theme).palette.background.default\n      }\n    },\n    ...colorSchemeStyles\n  };\n  const themeOverrides = theme.components?.MuiCssBaseline?.styleOverrides;\n  if (themeOverrides) {\n    defaultStyles = [defaultStyles, themeOverrides];\n  }\n  return defaultStyles;\n};\n\n// `ecs` stands for enableColorScheme. This is internal logic to make it work with Pigment CSS, so shorter is better.\nconst SELECTOR = 'mui-ecs';\nconst staticStyles = theme => {\n  const result = styles(theme, false);\n  const baseStyles = Array.isArray(result) ? result[0] : result;\n  if (!theme.vars && baseStyles) {\n    baseStyles.html[`:root:has(${SELECTOR})`] = {\n      colorScheme: theme.palette.mode\n    };\n  }\n  if (theme.colorSchemes) {\n    Object.entries(theme.colorSchemes).forEach(([key, scheme]) => {\n      const selector = theme.getColorSchemeSelector(key);\n      if (selector.startsWith('@')) {\n        // for @media (prefers-color-scheme), we need to target :root\n        baseStyles[selector] = {\n          [`:root:not(:has(.${SELECTOR}))`]: {\n            colorScheme: scheme.palette?.mode\n          }\n        };\n      } else {\n        // else, it's likely that the selector already target an element with a class or data attribute\n        baseStyles[selector.replace(/\\s*&/, '')] = {\n          [`&:not(:has(.${SELECTOR}))`]: {\n            colorScheme: scheme.palette?.mode\n          }\n        };\n      }\n    });\n  }\n  return result;\n};\nconst GlobalStyles = globalCss(isDynamicSupport ? ({\n  theme,\n  enableColorScheme\n}) => styles(theme, enableColorScheme) : ({\n  theme\n}) => staticStyles(theme));\n\n/**\n * Kickstart an elegant, consistent, and simple baseline to build upon.\n */\nfunction CssBaseline(inProps) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCssBaseline'\n  });\n  const {\n    children,\n    enableColorScheme = false\n  } = props;\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [isDynamicSupport && /*#__PURE__*/_jsx(GlobalStyles, {\n      enableColorScheme: enableColorScheme\n    }), !isDynamicSupport && !enableColorScheme && /*#__PURE__*/_jsx(\"span\", {\n      className: SELECTOR,\n      style: {\n        display: 'none'\n      }\n    }), children]\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? CssBaseline.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * You can wrap a node.\n   */\n  children: PropTypes.node,\n  /**\n   * Enable `color-scheme` CSS property to use `theme.palette.mode`.\n   * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme\n   * For browser support, check out https://caniuse.com/?search=color-scheme\n   * @default false\n   */\n  enableColorScheme: PropTypes.bool\n} : void 0;\nexport default CssBaseline;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getScopedCssBaselineUtilityClass(slot) {\n  return generateUtilityClass('MuiScopedCssBaseline', slot);\n}\nconst scopedCssBaselineClasses = generateUtilityClasses('MuiScopedCssBaseline', ['root']);\nexport default scopedCssBaselineClasses;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport { html, body } from \"../CssBaseline/CssBaseline.js\";\nimport { getScopedCssBaselineUtilityClass } from \"./scopedCssBaselineClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getScopedCssBaselineUtilityClass, classes);\n};\nconst ScopedCssBaselineRoot = styled('div', {\n  name: 'MuiScopedCssBaseline',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(memoTheme(({\n  theme\n}) => {\n  const colorSchemeStyles = {};\n  if (theme.colorSchemes) {\n    Object.entries(theme.colorSchemes).forEach(([key, scheme]) => {\n      const selector = theme.getColorSchemeSelector(key);\n      if (selector.startsWith('@')) {\n        colorSchemeStyles[selector] = {\n          colorScheme: scheme.palette?.mode\n        };\n      } else {\n        colorSchemeStyles[`&${selector.replace(/\\s*&/, '')}`] = {\n          colorScheme: scheme.palette?.mode\n        };\n      }\n    });\n  }\n  return {\n    ...html(theme, false),\n    ...body(theme),\n    '& *, & *::before, & *::after': {\n      boxSizing: 'inherit'\n    },\n    '& strong, & b': {\n      fontWeight: theme.typography.fontWeightBold\n    },\n    variants: [{\n      props: {\n        enableColorScheme: true\n      },\n      style: theme.vars ? colorSchemeStyles : {\n        colorScheme: theme.palette.mode\n      }\n    }]\n  };\n}));\nconst ScopedCssBaseline = /*#__PURE__*/React.forwardRef(function ScopedCssBaseline(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiScopedCssBaseline'\n  });\n  const {\n    className,\n    component = 'div',\n    enableColorScheme,\n    ...other\n  } = props;\n  const ownerState = {\n    ...props,\n    component\n  };\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(ScopedCssBaselineRoot, {\n    as: component,\n    className: clsx(classes.root, className),\n    ref: ref,\n    ownerState: ownerState,\n    ...other\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? ScopedCssBaseline.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * Enable `color-scheme` CSS property to use `theme.palette.mode`.\n   * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme\n   * For browser support, check out https://caniuse.com/?search=color-scheme\n   */\n  enableColorScheme: PropTypes.bool,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default ScopedCssBaseline;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles as MuiGlobalStyles } from '@mui/styled-engine';\nimport useTheme from \"../useTheme/index.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction GlobalStyles({\n  styles,\n  themeId,\n  defaultTheme = {}\n}) {\n  const upperTheme = useTheme(defaultTheme);\n  const globalStyles = typeof styles === 'function' ? styles(themeId ? upperTheme[themeId] || upperTheme : upperTheme) : styles;\n  return /*#__PURE__*/_jsx(MuiGlobalStyles, {\n    styles: globalStyles\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? GlobalStyles.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  defaultTheme: PropTypes.object,\n  /**\n   * @ignore\n   */\n  styles: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.array, PropTypes.func, PropTypes.number, PropTypes.object, PropTypes.string, PropTypes.bool]),\n  /**\n   * @ignore\n   */\n  themeId: PropTypes.string\n} : void 0;\nexport default GlobalStyles;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles as SystemGlobalStyles } from '@mui/system';\nimport defaultTheme from \"../styles/defaultTheme.js\";\nimport THEME_ID from \"../styles/identifier.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction GlobalStyles(props) {\n  return /*#__PURE__*/_jsx(SystemGlobalStyles, {\n    ...props,\n    defaultTheme: defaultTheme,\n    themeId: THEME_ID\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? GlobalStyles.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The styles you want to apply globally.\n   */\n  styles: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.array, PropTypes.func, PropTypes.number, PropTypes.object, PropTypes.string, PropTypes.bool])\n} : void 0;\nexport default GlobalStyles;","import * as React from 'react';\nimport { extendSxProp } from '@mui/system/styleFunctionSx';\nimport useTheme from \"../styles/useTheme.js\";\nimport GlobalStyles from \"../GlobalStyles/index.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport { css, keyframes } from '@mui/system';\nexport { default as styled } from \"../styles/styled.js\";\nexport function globalCss(styles) {\n  return function GlobalStylesWrapper(props) {\n    return (\n      /*#__PURE__*/\n      // Pigment CSS `globalCss` support callback with theme inside an object but `GlobalStyles` support theme as a callback value.\n      _jsx(GlobalStyles, {\n        styles: typeof styles === 'function' ? theme => styles({\n          theme,\n          ...props\n        }) : styles\n      })\n    );\n  };\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function internal_createExtendSxProp() {\n  return extendSxProp;\n}\nexport { useTheme };"],"names":["isDynamicSupport","globalCss","html","theme","enableColorScheme","_objectSpread","WebkitFontSmoothing","MozOsxFontSmoothing","boxSizing","WebkitTextSizeAdjust","vars","colorScheme","palette","mode","body","color","text","primary","typography","body1","backgroundColor","background","default","common","white","styles","_theme$components","_theme$components$Mui","arguments","length","undefined","colorSchemeStyles","colorSchemes","getColorSchemeSelector","Object","entries","forEach","_ref","_scheme$palette","_scheme$palette2","_ref2","_slicedToArray","key","scheme","selector","startsWith","replace","defaultStyles","fontWeight","fontWeightBold","margin","themeOverrides","components","MuiCssBaseline","styleOverrides","SELECTOR","GlobalStyles","_ref5","_ref6","result","baseStyles","Array","isArray","concat","_ref3","_scheme$palette3","_scheme$palette4","_ref4","_defineProperty","staticStyles","inProps","props","useDefaultProps","name","children","_props$enableColorSch","_jsxs","React","_jsx","className","style","display","getScopedCssBaselineUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","ScopedCssBaselineRoot","styled","overridesResolver","root","memoTheme","variants","ref","_props$component","component","other","_objectWithoutProperties","ownerState","classes","composeClasses","useUtilityClasses","as","clsx","themeId","_ref$defaultTheme","defaultTheme","upperTheme","useTheme","globalStyles","MuiGlobalStyles","SystemGlobalStyles","THEME_ID","internal_createExtendSxProp","extendSxProp"],"sourceRoot":""}