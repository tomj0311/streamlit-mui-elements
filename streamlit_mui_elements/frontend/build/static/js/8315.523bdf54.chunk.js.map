{"version":3,"file":"static/js/8315.523bdf54.chunk.js","mappings":"+XAsCe,SAASA,IAAiE,IAAlCC,EAA2BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GACnF,OAAO,SAAAG,GAAA,IAAIC,GAAJC,EAAAA,EAAAA,GAAAF,EAAA,GAAS,UAAMC,GArBxB,SAAuCE,GAAuC,IAAlCP,EAA2BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GACxE,IAbF,SAAgCM,GAC9B,MAA2B,kBAAbA,EAAIC,IACpB,CAWOC,CAAuBF,GAC1B,OAAO,EACR,IAC8CG,EAD9CC,GAAAC,EAAAA,EAAAA,GACmBZ,GAA2B,IAA/C,IAAAW,EAAAE,MAAAH,EAAAC,EAAAG,KAAAC,MAAiD,KAAtCV,EAAKK,EAAAL,MACd,IAAKE,EAAIS,eAAeX,IAAgC,kBAAfE,EAAIF,GAC3C,OAAO,CAEX,CAAC,OAAAY,GAAAN,EAAAO,EAAAD,EAAA,SAAAN,EAAAQ,GAAA,CACD,OAAO,CACT,CAWiCC,CAA8Bf,EAAOL,EAA4B,CAClG,C,qCCrCA,IAAeqB,EAAU,C,uBCHV,SAASC,EAAcC,GACpC,OAAOA,GAAQA,EAAKD,eAAiBE,QACvC,C,oGCDe,SAASC,EAAYF,GAElC,OADYD,EAAAA,EAAAA,GAAcC,GACfG,aAAeC,MAC5B,C,uBCSe,SAASC,EAAOC,EAAKxB,GACf,oBAARwB,EACTA,EAAIxB,GACKwB,IACTA,EAAIC,QAAUzB,EAElB,C,oECRM0B,EAAsC,qBAAXJ,OAAyBK,EAAAA,gBAAwBA,EAAAA,UAClF,K,+ECSe,SAASX,IAAoB,QAAAY,EAAAhC,UAAAC,OAANgC,EAAI,IAAAC,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAJF,EAAIE,GAAAnC,UAAAmC,GAMxC,OAAOJ,EAAAA,SAAc,WACnB,OAAIE,EAAKG,OAAM,SAAAR,GAAG,OAAW,MAAPA,CAAW,IACxB,KAEF,SAAAS,GACLJ,EAAKK,SAAQ,SAAAV,IACXD,EAAAA,EAAAA,GAAOC,EAAKS,EACd,GACF,CAGF,GAAGJ,EACL,C","sources":["../node_modules/@mui/material/utils/createSimplePaletteValueFilter.js","../node_modules/@mui/material/utils/useForkRef.js","../node_modules/@mui/utils/esm/ownerDocument/ownerDocument.js","../node_modules/@mui/utils/esm/ownerWindow/ownerWindow.js","../node_modules/@mui/utils/esm/setRef/setRef.js","../node_modules/@mui/utils/esm/useEnhancedEffect/useEnhancedEffect.js","../node_modules/@mui/utils/esm/useForkRef/useForkRef.js"],"sourcesContent":["/**\n * Type guard to check if the object has a \"main\" property of type string.\n *\n * @param obj - the object to check\n * @returns boolean\n */\nfunction hasCorrectMainProperty(obj) {\n  return typeof obj.main === 'string';\n}\n/**\n * Checks if the object conforms to the SimplePaletteColorOptions type.\n * The minimum requirement is that the object has a \"main\" property of type string, this is always checked.\n * Optionally, you can pass additional properties to check.\n *\n * @param obj - The object to check\n * @param additionalPropertiesToCheck - Array containing \"light\", \"dark\", and/or \"contrastText\"\n * @returns boolean\n */\nfunction checkSimplePaletteColorValues(obj, additionalPropertiesToCheck = []) {\n  if (!hasCorrectMainProperty(obj)) {\n    return false;\n  }\n  for (const value of additionalPropertiesToCheck) {\n    if (!obj.hasOwnProperty(value) || typeof obj[value] !== 'string') {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Creates a filter function used to filter simple palette color options.\n * The minimum requirement is that the object has a \"main\" property of type string, this is always checked.\n * Optionally, you can pass additional properties to check.\n *\n * @param additionalPropertiesToCheck - Array containing \"light\", \"dark\", and/or \"contrastText\"\n * @returns ([, value]: [any, PaletteColorOptions]) => boolean\n */\nexport default function createSimplePaletteValueFilter(additionalPropertiesToCheck = []) {\n  return ([, value]) => value && checkSimplePaletteColorValues(value, additionalPropertiesToCheck);\n}","'use client';\n\nimport useForkRef from '@mui/utils/useForkRef';\nexport default useForkRef;","export default function ownerDocument(node) {\n  return node && node.ownerDocument || document;\n}","import ownerDocument from \"../ownerDocument/index.js\";\nexport default function ownerWindow(node) {\n  const doc = ownerDocument(node);\n  return doc.defaultView || window;\n}","/**\n * TODO v5: consider making it private\n *\n * passes {value} to {ref}\n *\n * WARNING: Be sure to only call this inside a callback that is passed as a ref.\n * Otherwise, make sure to cleanup the previous {ref} if it changes. See\n * https://github.com/mui/material-ui/issues/13539\n *\n * Useful if you want to expose the ref of an inner component to the public API\n * while still using it inside the component.\n * @param ref A ref callback or ref object. If anything falsy, this is a no-op.\n */\nexport default function setRef(ref, value) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}","'use client';\n\nimport * as React from 'react';\n\n/**\n * A version of `React.useLayoutEffect` that does not show a warning when server-side rendering.\n * This is useful for effects that are only needed for client-side rendering but not for SSR.\n *\n * Before you use this hook, make sure to read https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85\n * and confirm it doesn't apply to your use-case.\n */\nconst useEnhancedEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\nexport default useEnhancedEffect;","'use client';\n\nimport * as React from 'react';\nimport setRef from \"../setRef/index.js\";\n\n/**\n * Takes an array of refs and returns a new ref which will apply any modification to all of the refs.\n * This is useful when you want to have the ref used in multiple places.\n *\n * ```tsx\n * const rootRef = React.useRef<Instance>(null);\n * const refFork = useForkRef(rootRef, props.ref);\n *\n * return (\n *   <Root {...props} ref={refFork} />\n * );\n * ```\n *\n * @param {Array<React.Ref<Instance> | undefined>} refs The ref array.\n * @returns {React.RefCallback<Instance> | null} The new ref callback.\n */\nexport default function useForkRef(...refs) {\n  /**\n   * This will create a new function if the refs passed to this hook change and are all defined.\n   * This means react will call the old forkRef with `null` and the new forkRef\n   * with the ref. Cleanup naturally emerges from this behavior.\n   */\n  return React.useMemo(() => {\n    if (refs.every(ref => ref == null)) {\n      return null;\n    }\n    return instance => {\n      refs.forEach(ref => {\n        setRef(ref, instance);\n      });\n    };\n    // TODO: uncomment once we enable eslint-plugin-react-compiler // eslint-disable-next-line react-compiler/react-compiler -- intentionally ignoring that the dependency array must be an array literal\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, refs);\n}"],"names":["createSimplePaletteValueFilter","additionalPropertiesToCheck","arguments","length","undefined","_ref","value","_slicedToArray","obj","main","hasCorrectMainProperty","_step","_iterator","_createForOfIteratorHelper","s","n","done","hasOwnProperty","err","e","f","checkSimplePaletteColorValues","useForkRef","ownerDocument","node","document","ownerWindow","defaultView","window","setRef","ref","current","useEnhancedEffect","React","_len","refs","Array","_key","every","instance","forEach"],"sourceRoot":""}