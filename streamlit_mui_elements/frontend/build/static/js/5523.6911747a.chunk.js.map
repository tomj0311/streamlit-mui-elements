{"version":3,"file":"static/js/5523.6911747a.chunk.js","mappings":"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","sources":["../node_modules/@mui/material/utils/capitalize.js","../node_modules/@mui/material/utils/createSimplePaletteValueFilter.js","../node_modules/@mui/utils/esm/isHostComponent/isHostComponent.js","../node_modules/@mui/utils/esm/appendOwnerState/appendOwnerState.js","../node_modules/@mui/utils/esm/extractEventHandlers/extractEventHandlers.js","../node_modules/@mui/utils/esm/omitEventHandlers/omitEventHandlers.js","../node_modules/@mui/utils/esm/mergeSlotProps/mergeSlotProps.js","../node_modules/@mui/utils/esm/resolveComponentProps/resolveComponentProps.js","../node_modules/@mui/utils/esm/setRef/setRef.js","../node_modules/@mui/utils/esm/useForkRef/useForkRef.js","../node_modules/@mui/utils/esm/usePreviousProps/usePreviousProps.js","../node_modules/@mui/utils/esm/useSlotProps/useSlotProps.js"],"sourcesContent":["import capitalize from '@mui/utils/capitalize';\nexport default capitalize;","/**\n * Type guard to check if the object has a \"main\" property of type string.\n *\n * @param obj - the object to check\n * @returns boolean\n */\nfunction hasCorrectMainProperty(obj) {\n  return typeof obj.main === 'string';\n}\n/**\n * Checks if the object conforms to the SimplePaletteColorOptions type.\n * The minimum requirement is that the object has a \"main\" property of type string, this is always checked.\n * Optionally, you can pass additional properties to check.\n *\n * @param obj - The object to check\n * @param additionalPropertiesToCheck - Array containing \"light\", \"dark\", and/or \"contrastText\"\n * @returns boolean\n */\nfunction checkSimplePaletteColorValues(obj, additionalPropertiesToCheck = []) {\n  if (!hasCorrectMainProperty(obj)) {\n    return false;\n  }\n  for (const value of additionalPropertiesToCheck) {\n    if (!obj.hasOwnProperty(value) || typeof obj[value] !== 'string') {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Creates a filter function used to filter simple palette color options.\n * The minimum requirement is that the object has a \"main\" property of type string, this is always checked.\n * Optionally, you can pass additional properties to check.\n *\n * @param additionalPropertiesToCheck - Array containing \"light\", \"dark\", and/or \"contrastText\"\n * @returns ([, value]: [any, PaletteColorOptions]) => boolean\n */\nexport default function createSimplePaletteValueFilter(additionalPropertiesToCheck = []) {\n  return ([, value]) => value && checkSimplePaletteColorValues(value, additionalPropertiesToCheck);\n}","/**\n * Determines if a given element is a DOM element name (i.e. not a React component).\n */\nfunction isHostComponent(element) {\n  return typeof element === 'string';\n}\nexport default isHostComponent;","import isHostComponent from \"../isHostComponent/index.js\";\n\n/**\n * Type of the ownerState based on the type of an element it applies to.\n * This resolves to the provided OwnerState for React components and `undefined` for host components.\n * Falls back to `OwnerState | undefined` when the exact type can't be determined in development time.\n */\n\n/**\n * Appends the ownerState object to the props, merging with the existing one if necessary.\n *\n * @param elementType Type of the element that owns the `existingProps`. If the element is a DOM node or undefined, `ownerState` is not applied.\n * @param otherProps Props of the element.\n * @param ownerState\n */\nfunction appendOwnerState(elementType, otherProps, ownerState) {\n  if (elementType === undefined || isHostComponent(elementType)) {\n    return otherProps;\n  }\n  return {\n    ...otherProps,\n    ownerState: {\n      ...otherProps.ownerState,\n      ...ownerState\n    }\n  };\n}\nexport default appendOwnerState;","/**\n * Extracts event handlers from a given object.\n * A prop is considered an event handler if it is a function and its name starts with `on`.\n *\n * @param object An object to extract event handlers from.\n * @param excludeKeys An array of keys to exclude from the returned object.\n */\nfunction extractEventHandlers(object, excludeKeys = []) {\n  if (object === undefined) {\n    return {};\n  }\n  const result = {};\n  Object.keys(object).filter(prop => prop.match(/^on[A-Z]/) && typeof object[prop] === 'function' && !excludeKeys.includes(prop)).forEach(prop => {\n    result[prop] = object[prop];\n  });\n  return result;\n}\nexport default extractEventHandlers;","/**\n * Removes event handlers from the given object.\n * A field is considered an event handler if it is a function with a name beginning with `on`.\n *\n * @param object Object to remove event handlers from.\n * @returns Object with event handlers removed.\n */\nfunction omitEventHandlers(object) {\n  if (object === undefined) {\n    return {};\n  }\n  const result = {};\n  Object.keys(object).filter(prop => !(prop.match(/^on[A-Z]/) && typeof object[prop] === 'function')).forEach(prop => {\n    result[prop] = object[prop];\n  });\n  return result;\n}\nexport default omitEventHandlers;","import clsx from 'clsx';\nimport extractEventHandlers from \"../extractEventHandlers/index.js\";\nimport omitEventHandlers from \"../omitEventHandlers/index.js\";\n/**\n * Merges the slot component internal props (usually coming from a hook)\n * with the externally provided ones.\n *\n * The merge order is (the latter overrides the former):\n * 1. The internal props (specified as a getter function to work with get*Props hook result)\n * 2. Additional props (specified internally on a Base UI component)\n * 3. External props specified on the owner component. These should only be used on a root slot.\n * 4. External props specified in the `slotProps.*` prop.\n * 5. The `className` prop - combined from all the above.\n * @param parameters\n * @returns\n */\nfunction mergeSlotProps(parameters) {\n  const {\n    getSlotProps,\n    additionalProps,\n    externalSlotProps,\n    externalForwardedProps,\n    className\n  } = parameters;\n  if (!getSlotProps) {\n    // The simpler case - getSlotProps is not defined, so no internal event handlers are defined,\n    // so we can simply merge all the props without having to worry about extracting event handlers.\n    const joinedClasses = clsx(additionalProps?.className, className, externalForwardedProps?.className, externalSlotProps?.className);\n    const mergedStyle = {\n      ...additionalProps?.style,\n      ...externalForwardedProps?.style,\n      ...externalSlotProps?.style\n    };\n    const props = {\n      ...additionalProps,\n      ...externalForwardedProps,\n      ...externalSlotProps\n    };\n    if (joinedClasses.length > 0) {\n      props.className = joinedClasses;\n    }\n    if (Object.keys(mergedStyle).length > 0) {\n      props.style = mergedStyle;\n    }\n    return {\n      props,\n      internalRef: undefined\n    };\n  }\n\n  // In this case, getSlotProps is responsible for calling the external event handlers.\n  // We don't need to include them in the merged props because of this.\n\n  const eventHandlers = extractEventHandlers({\n    ...externalForwardedProps,\n    ...externalSlotProps\n  });\n  const componentsPropsWithoutEventHandlers = omitEventHandlers(externalSlotProps);\n  const otherPropsWithoutEventHandlers = omitEventHandlers(externalForwardedProps);\n  const internalSlotProps = getSlotProps(eventHandlers);\n\n  // The order of classes is important here.\n  // Emotion (that we use in libraries consuming Base UI) depends on this order\n  // to properly override style. It requires the most important classes to be last\n  // (see https://github.com/mui/material-ui/pull/33205) for the related discussion.\n  const joinedClasses = clsx(internalSlotProps?.className, additionalProps?.className, className, externalForwardedProps?.className, externalSlotProps?.className);\n  const mergedStyle = {\n    ...internalSlotProps?.style,\n    ...additionalProps?.style,\n    ...externalForwardedProps?.style,\n    ...externalSlotProps?.style\n  };\n  const props = {\n    ...internalSlotProps,\n    ...additionalProps,\n    ...otherPropsWithoutEventHandlers,\n    ...componentsPropsWithoutEventHandlers\n  };\n  if (joinedClasses.length > 0) {\n    props.className = joinedClasses;\n  }\n  if (Object.keys(mergedStyle).length > 0) {\n    props.style = mergedStyle;\n  }\n  return {\n    props,\n    internalRef: internalSlotProps.ref\n  };\n}\nexport default mergeSlotProps;","/**\n * If `componentProps` is a function, calls it with the provided `ownerState`.\n * Otherwise, just returns `componentProps`.\n */\nfunction resolveComponentProps(componentProps, ownerState, slotState) {\n  if (typeof componentProps === 'function') {\n    return componentProps(ownerState, slotState);\n  }\n  return componentProps;\n}\nexport default resolveComponentProps;","/**\n * TODO v5: consider making it private\n *\n * passes {value} to {ref}\n *\n * WARNING: Be sure to only call this inside a callback that is passed as a ref.\n * Otherwise, make sure to cleanup the previous {ref} if it changes. See\n * https://github.com/mui/material-ui/issues/13539\n *\n * Useful if you want to expose the ref of an inner component to the public API\n * while still using it inside the component.\n * @param ref A ref callback or ref object. If anything falsy, this is a no-op.\n */\nexport default function setRef(ref, value) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}","'use client';\n\nimport * as React from 'react';\nimport setRef from \"../setRef/index.js\";\n\n/**\n * Takes an array of refs and returns a new ref which will apply any modification to all of the refs.\n * This is useful when you want to have the ref used in multiple places.\n *\n * ```tsx\n * const rootRef = React.useRef<Instance>(null);\n * const refFork = useForkRef(rootRef, props.ref);\n *\n * return (\n *   <Root {...props} ref={refFork} />\n * );\n * ```\n *\n * @param {Array<React.Ref<Instance> | undefined>} refs The ref array.\n * @returns {React.RefCallback<Instance> | null} The new ref callback.\n */\nexport default function useForkRef(...refs) {\n  /**\n   * This will create a new function if the refs passed to this hook change and are all defined.\n   * This means react will call the old forkRef with `null` and the new forkRef\n   * with the ref. Cleanup naturally emerges from this behavior.\n   */\n  return React.useMemo(() => {\n    if (refs.every(ref => ref == null)) {\n      return null;\n    }\n    return instance => {\n      refs.forEach(ref => {\n        setRef(ref, instance);\n      });\n    };\n    // TODO: uncomment once we enable eslint-plugin-react-compiler // eslint-disable-next-line react-compiler/react-compiler -- intentionally ignoring that the dependency array must be an array literal\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, refs);\n}","'use client';\n\nimport * as React from 'react';\nconst usePreviousProps = value => {\n  const ref = React.useRef({});\n  React.useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};\nexport default usePreviousProps;","'use client';\n\nimport useForkRef from \"../useForkRef/index.js\";\nimport appendOwnerState from \"../appendOwnerState/index.js\";\nimport mergeSlotProps from \"../mergeSlotProps/index.js\";\nimport resolveComponentProps from \"../resolveComponentProps/index.js\";\n/**\n * @ignore - do not document.\n * Builds the props to be passed into the slot of an unstyled component.\n * It merges the internal props of the component with the ones supplied by the user, allowing to customize the behavior.\n * If the slot component is not a host component, it also merges in the `ownerState`.\n *\n * @param parameters.getSlotProps - A function that returns the props to be passed to the slot component.\n */\nfunction useSlotProps(parameters) {\n  const {\n    elementType,\n    externalSlotProps,\n    ownerState,\n    skipResolvingSlotProps = false,\n    ...other\n  } = parameters;\n  const resolvedComponentsProps = skipResolvingSlotProps ? {} : resolveComponentProps(externalSlotProps, ownerState);\n  const {\n    props: mergedProps,\n    internalRef\n  } = mergeSlotProps({\n    ...other,\n    externalSlotProps: resolvedComponentsProps\n  });\n  const ref = useForkRef(internalRef, resolvedComponentsProps?.ref, parameters.additionalProps?.ref);\n  const props = appendOwnerState(elementType, {\n    ...mergedProps,\n    ref\n  }, ownerState);\n  return props;\n}\nexport default useSlotProps;"],"names":["capitalize","createSimplePaletteValueFilter","additionalPropertiesToCheck","arguments","length","undefined","_ref","value","_slicedToArray","obj","main","hasCorrectMainProperty","_step","_iterator","_createForOfIteratorHelper","s","n","done","hasOwnProperty","err","e","f","checkSimplePaletteColorValues","element","elementType","otherProps","ownerState","isHostComponent","_objectSpread","object","excludeKeys","result","Object","keys","filter","prop","match","includes","forEach","parameters","getSlotProps","additionalProps","externalSlotProps","externalForwardedProps","className","joinedClasses","clsx","mergedStyle","style","props","internalRef","eventHandlers","extractEventHandlers","componentsPropsWithoutEventHandlers","omitEventHandlers","otherPropsWithoutEventHandlers","internalSlotProps","ref","componentProps","slotState","setRef","current","useForkRef","_len","refs","Array","_key","React","every","instance","_excluded","_parameters$additiona","_parameters$skipResol","skipResolvingSlotProps","other","_objectWithoutProperties","resolvedComponentsProps","resolveComponentProps","_mergeSlotProps","mergeSlotProps","mergedProps","appendOwnerState"],"sourceRoot":""}